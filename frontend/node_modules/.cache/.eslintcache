[{"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/modals/GetCardDetailsModal.jsx":"1","/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/SideBarMenu/BoardDetails.jsx":"2","/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/SideBarMenu/Reorder.jsx":"3","/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/pages/SideBar/Sidebar.jsx":"4","/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/SideBarMenu/CardItem.jsx":"5","/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/SideBarMenu/CardsList.jsx":"6","/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/SideBarMenu/List.jsx":"7","/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/services/boardService.jsx":"8","/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/services/index.js":"9","/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/services/listService.jsx":"10"},{"size":817,"mtime":1690184637312,"results":"11","hashOfConfig":"12"},{"size":10089,"mtime":1692601990228,"results":"13","hashOfConfig":"12"},{"size":1106,"mtime":1692253077829,"results":"14","hashOfConfig":"12"},{"size":4178,"mtime":1691401802024,"results":"15","hashOfConfig":"12"},{"size":552,"mtime":1692253051745,"results":"16","hashOfConfig":"12"},{"size":3932,"mtime":1692344926475,"results":"17","hashOfConfig":"12"},{"size":1170,"mtime":1692344976918,"results":"18","hashOfConfig":"12"},{"size":838,"mtime":1692268286485,"results":"19","hashOfConfig":"12"},{"size":334,"mtime":1692264546581,"results":"20","hashOfConfig":"12"},{"size":406,"mtime":1692344246539,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1den5",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/modals/GetCardDetailsModal.jsx",[],[],"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/SideBarMenu/BoardDetails.jsx",["54","55","56","57","58","59"],[],"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/SideBarMenu/Reorder.jsx",[],[],"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/pages/SideBar/Sidebar.jsx",[],[],"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/SideBarMenu/CardItem.jsx",["60"],[],"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/SideBarMenu/CardsList.jsx",["61"],[],"import { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { RxCross2 } from \"react-icons/rx\";\nimport { useForm } from \"react-hook-form\";\nimport CardItem from \"./CardItem\";\nimport { addNewCard } from \"../../services\";\n\nconst InnerCardList = function InnerCardList(props) {\n\n  const listIndex = props.listIndex;\n  const [globalIndex, setGlobalIndex] = useState(-1);\n  const [isAddCardVisible, setIsAddCardVisible] = useState(false);\n  const { register, handleSubmit } = useForm();\n\n  const submitCard = async (formData, list) => {\n    // formData.listID = list.listID;\n    // await addNewCard(formData)\n    //   .then(() => {\n    //     board.list[list.listIndex].card.push(formData);\n    //   })\n    //   .catch((err) => console.log(err));\n    // setIsAddCardVisible(!isAddCardVisible);\n    // reset({\n    //   cardTitle: \"\",\n    // });\n  };\n \n  return (\n    <>\n      {props?.cards.map((card, index) => (\n        <Draggable key={card._id} draggableId={card._id} index={index}>\n          {(dragProvided, dragSnapshot) => (\n            <CardItem\n              key={card._id}\n              card={card}\n              isdragging={dragSnapshot.isDragging.toString()}\n              isgroupedover={Boolean(dragSnapshot.combineTargetFor)}\n              provided={dragProvided}\n            />\n          )}\n        </Draggable>\n      ))}\n\n      {isAddCardVisible && globalIndex === listIndex ? (\n        <form\n          className=\"p-2 text-light list-bg-color rounded-3 pointer col-3 d-flex flex-column align-items-start gap-2 end-0 w-100\"\n          onSubmit={handleSubmit((formData) =>\n            submitCard(formData, {\n              // listID: \"checkkkkkk\",\n              listIndex: listIndex,\n            })\n          )}\n        >\n          <input\n            className=\"rounded px-2 text-light w-100\"\n            placeholder=\"enter card name\"\n            style={{\n              backgroundColor: \"#22272B\",\n              border: \"1px solid #85B8FF\",\n            }}\n            {...register(\"cardTitle\", { required: true })}\n          />\n\n          <div className=\"d-flex align-items-center gap-2 \">\n            <button className=\"btn btn-sm btn-warning\">Add card </button>\n            <RxCross2\n              size={25}\n              onClick={() => setIsAddCardVisible(!isAddCardVisible)}\n            />\n          </div>\n        </form>\n      ) : (\n        <div\n          className=\"p-2 hoverEffect rounded pointer\"\n          onClick={() => {\n            setIsAddCardVisible(!isAddCardVisible);\n            setGlobalIndex(listIndex);\n          }}\n        >\n          + add new card\n        </div>\n      )}\n    </>\n  );\n};\n\nfunction InnerCards(props) {\n\n  const { cards, dropProvided } = props;\n  const title = props.title ? <div>{props.title}</div> : null;\n  return (\n    <div>\n      {title}\n      <div ref={dropProvided.innerRef}>\n        <InnerCardList cards={cards} />\n        {dropProvided.placeholder}\n      </div>\n    </div>\n  );\n}\n\nexport default function CardsList(props) {\n  const {\n    ignoreContainerClipping,\n    isDropDisabled,\n    isCombineEnabled,\n    listId = \"LIST\",\n    listType,\n    cards,\n    title,\n    listIndex,\n  } = props;\n\n  return (\n    <Droppable\n      droppableId={listId}\n      type={listType}\n      ignoreContainerClipping={ignoreContainerClipping}\n      isdropdisabled={isDropDisabled}\n      isCombineEnabled={isCombineEnabled}\n    >\n      {(dropProvided, dropSnapshot) => (\n        <div\n          isdraggingover={dropSnapshot.isDraggingOver.toString()}\n          isdropdisabled={isDropDisabled}\n          isdraggingfrom={Boolean(dropSnapshot.draggingFromThisWith).toString()}\n          {...dropProvided.droppableProps}\n        >\n          <InnerCards\n            cards={cards}\n            title={title}\n            dropProvided={dropProvided}\n            listIndex={listIndex}\n          />\n        </div>\n      )}\n    </Droppable>\n  );\n}\n",[],"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/components/SideBarMenu/List.jsx",[],[],"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/services/boardService.jsx",[],[],"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/services/index.js",[],[],"/home/am-pc-50/CoderSagar/Assignments/task-management-board/frontend/src/services/listService.jsx",[],[],{"ruleId":"62","severity":1,"message":"63","line":9,"column":3,"nodeType":"64","messageId":"65","endLine":9,"endColumn":18},{"ruleId":"62","severity":1,"message":"66","line":15,"column":10,"nodeType":"64","messageId":"65","endLine":15,"endColumn":32},{"ruleId":"62","severity":1,"message":"67","line":16,"column":10,"nodeType":"64","messageId":"65","endLine":16,"endColumn":34},{"ruleId":"62","severity":1,"message":"68","line":83,"column":9,"nodeType":"64","messageId":"65","endLine":83,"endColumn":19},{"ruleId":"62","severity":1,"message":"69","line":98,"column":9,"nodeType":"64","messageId":"65","endLine":98,"endColumn":19},{"ruleId":"62","severity":1,"message":"70","line":107,"column":9,"nodeType":"64","messageId":"65","endLine":107,"endColumn":24},{"ruleId":"62","severity":1,"message":"71","line":4,"column":63,"nodeType":"64","messageId":"65","endLine":4,"endColumn":68},{"ruleId":"62","severity":1,"message":"72","line":7,"column":10,"nodeType":"64","messageId":"65","endLine":7,"endColumn":20},"no-unused-vars","'updateBoardList' is defined but never used.","Identifier","unusedVar","'PiDotsThreeOutlineThin' is defined but never used.","'MdOutlineModeEditOutline' is defined but never used.","'submitCard' is assigned a value but never used.","'deleteList' is assigned a value but never used.","'submitListTitle' is assigned a value but never used.","'index' is assigned a value but never used.","'addNewCard' is defined but never used."]